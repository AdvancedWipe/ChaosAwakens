package io.github.chaosawakens.common.config;

import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.common.ForgeConfigSpec.ConfigValue;
import org.apache.commons.lang3.tuple.Pair;

public class CAConfig {

	public static final ForgeConfigSpec COMMON_SPEC;
	public static final Common COMMON;

	static {
		final Pair<Common, ForgeConfigSpec> commonSpecPair = new ForgeConfigSpec.Builder().configure(Common::new);
		COMMON_SPEC = commonSpecPair.getRight();
		COMMON = commonSpecPair.getLeft();
	}

	public static class Common {
		public final ForgeConfigSpec.IntValue ultimateSwordDamage;
		public final ForgeConfigSpec.IntValue ultimateAxeDamage;
		public final ForgeConfigSpec.IntValue ultimatePickaxeDamage;
		public final ForgeConfigSpec.IntValue ultimateShovelDamage;
		public final ForgeConfigSpec.IntValue ultimateHoeDamage;
		public final ConfigValue<Double> ultimateBowArrowBaseDamage;
		public final ConfigValue<Double> ultimateBowArrowDamageMultiplier;
		public final ForgeConfigSpec.IntValue emeraldSwordDamage;
		public final ForgeConfigSpec.IntValue emeraldAxeDamage;
		public final ForgeConfigSpec.IntValue emeraldPickaxeDamage;
		public final ForgeConfigSpec.IntValue emeraldShovelDamage;
		public final ForgeConfigSpec.IntValue emeraldHoeDamage;
		public final ForgeConfigSpec.IntValue rubySwordDamage;
		public final ForgeConfigSpec.IntValue rubyAxeDamage;
		public final ForgeConfigSpec.IntValue rubyPickaxeDamage;
		public final ForgeConfigSpec.IntValue rubyShovelDamage;
		public final ForgeConfigSpec.IntValue rubyHoeDamage;
		public final ForgeConfigSpec.IntValue amethystSwordDamage;
		public final ForgeConfigSpec.IntValue amethystAxeDamage;
		public final ForgeConfigSpec.IntValue amethystPickaxeDamage;
		public final ForgeConfigSpec.IntValue amethystShovelDamage;
		public final ForgeConfigSpec.IntValue amethystHoeDamage;
		public final ForgeConfigSpec.IntValue tigersEyeSwordDamage;
		public final ForgeConfigSpec.IntValue tigersEyeAxeDamage;
		public final ForgeConfigSpec.IntValue tigersEyePickaxeDamage;
		public final ForgeConfigSpec.IntValue tigersEyeShovelDamage;
		public final ForgeConfigSpec.IntValue tigersEyeHoeDamage;
		public final ForgeConfigSpec.IntValue copperSwordDamage;
		public final ForgeConfigSpec.IntValue copperAxeDamage;
		public final ForgeConfigSpec.IntValue copperPickaxeDamage;
		public final ForgeConfigSpec.IntValue copperShovelDamage;
		public final ForgeConfigSpec.IntValue copperHoeDamage;
		public final ForgeConfigSpec.IntValue tinSwordDamage;
		public final ForgeConfigSpec.IntValue tinAxeDamage;
		public final ForgeConfigSpec.IntValue tinPickaxeDamage;
		public final ForgeConfigSpec.IntValue tinShovelDamage;
		public final ForgeConfigSpec.IntValue tinHoeDamage;
		public final ForgeConfigSpec.IntValue silverSwordDamage;
		public final ForgeConfigSpec.IntValue silverAxeDamage;
		public final ForgeConfigSpec.IntValue silverPickaxeDamage;
		public final ForgeConfigSpec.IntValue silverShovelDamage;
		public final ForgeConfigSpec.IntValue silverHoeDamage;
		public final ForgeConfigSpec.IntValue platinumSwordDamage;
		public final ForgeConfigSpec.IntValue platinumAxeDamage;
		public final ForgeConfigSpec.IntValue platinumPickaxeDamage;
		public final ForgeConfigSpec.IntValue platinumShovelDamage;
		public final ForgeConfigSpec.IntValue platinumHoeDamage;
		public final ForgeConfigSpec.IntValue crystalWoodSwordDamage;
		public final ForgeConfigSpec.IntValue crystalWoodAxeDamage;
		public final ForgeConfigSpec.IntValue crystalWoodPickaxeDamage;
		public final ForgeConfigSpec.IntValue crystalWoodShovelDamage;
		public final ForgeConfigSpec.IntValue crystalWoodHoeDamage;
		public final ForgeConfigSpec.IntValue kyaniteSwordDamage;
		public final ForgeConfigSpec.IntValue kyaniteAxeDamage;
		public final ForgeConfigSpec.IntValue kyanitePickaxeDamage;
		public final ForgeConfigSpec.IntValue kyaniteShovelDamage;
		public final ForgeConfigSpec.IntValue kyaniteHoeDamage;
		public final ForgeConfigSpec.IntValue catsEyeSwordDamage;
		public final ForgeConfigSpec.IntValue catsEyeAxeDamage;
		public final ForgeConfigSpec.IntValue catsEyePickaxeDamage;
		public final ForgeConfigSpec.IntValue catsEyeShovelDamage;
		public final ForgeConfigSpec.IntValue catsEyeHoeDamage;
		public final ForgeConfigSpec.IntValue pinkTourmSwordDamage;
		public final ForgeConfigSpec.IntValue pinkTourmAxeDamage;
		public final ForgeConfigSpec.IntValue pinkTourmPickaxeDamage;
		public final ForgeConfigSpec.IntValue pinkTourmShovelDamage;
		public final ForgeConfigSpec.IntValue pinkTourmHoeDamage;
		public final ForgeConfigSpec.IntValue nightmareSwordDamage;
		public final ForgeConfigSpec.IntValue experienceSwordDamage;
		public final ForgeConfigSpec.IntValue poisonSwordDamage;
		public final ForgeConfigSpec.IntValue ratSwordDamage;
		public final ForgeConfigSpec.IntValue fairySwordDamage;
		public final ForgeConfigSpec.IntValue mantisClawDamage;
		public final ForgeConfigSpec.IntValue bigHammerDamage;
		public final ForgeConfigSpec.IntValue prismaticReaperDamage;

		public final ForgeConfigSpec.IntValue attitudeAdjusterDamage;
		public final ForgeConfigSpec.IntValue berthaDamage;
		public final ForgeConfigSpec.IntValue battleAxeDamage;
		public final ForgeConfigSpec.IntValue queenAxeDamage;
		public final ForgeConfigSpec.IntValue slayerChainsawDamage;

		public final ConfigValue<Integer> attitudeAdjusterExplosionSize;

		public final ConfigValue<Integer> thunderStaffExplosionSize;
		public final ConfigValue<Integer> thunderStaffExplosionType;
		public final ConfigValue<Boolean> thunderStaffExplosionFire;
		public final ConfigValue<Integer> rayGunExplosionSize;
		public final ConfigValue<Integer> rayGunExplosionType;
		public final ConfigValue<Boolean> rayGunExplosionFire;

		public final ConfigValue<Boolean> enableAutoEnchanting;

		public final ConfigValue<Boolean> crystalWorldRequiresEmptyInventory;
		public final ConfigValue<Boolean> enableBrownAntTeleport;
		public final ConfigValue<Boolean> enableRainbowAntTeleport;
		public final ConfigValue<Boolean> enableRedAntTeleport;
		public final ConfigValue<Boolean> enableUnstableAntTeleport;
		public final ConfigValue<Boolean> enableTermiteTeleport;
		public final ConfigValue<Boolean> enableButterflyTeleport;

		public final ConfigValue<Boolean> enableOreGen;
		public final ConfigValue<Boolean> enableFossilGen;
		public final ConfigValue<Boolean> enableTrollOreGen;
		public final ConfigValue<Boolean> enableDzMineralOreGen;
		public final ConfigValue<Boolean> spawnDzOresInOverworld;
		public final ConfigValue<Boolean> enableNestGen;

		public final ConfigValue<Boolean> enableOreRubyGen;
		public final ConfigValue<Boolean> enableOreTigersEyeGen;
		public final ConfigValue<Boolean> enableOreAmethystGen;
		public final ConfigValue<Boolean> enableOreTitaniumGen;
		public final ConfigValue<Boolean> enableOreUraniumGen;
		public final ConfigValue<Boolean> enableOreSaltGen;
		public final ConfigValue<Boolean> enableOreAluminumGen;
		public final ConfigValue<Boolean> enableOreCopperGen;
		public final ConfigValue<Boolean> enableOreTinGen;
		public final ConfigValue<Boolean> enableOreSilverGen;
		public final ConfigValue<Boolean> enableOrePlatinumGen;
		public final ConfigValue<Boolean> enableOreSunstoneGen;
		public final ConfigValue<Boolean> enableOreBloodstoneGen;

		public final ConfigValue<Boolean> enableEnchantedAnimalBreeding;

		public final ConfigValue<Boolean> holidayTextures;

		public final ConfigValue<Boolean> enableDragonEggRespawns;
		public final ConfigValue<Boolean> enderDragonHeadDrop;

		public final ConfigValue<Boolean> terraforgedCheckMsg;

		public final ConfigValue<Integer> spawnEggsSpawnersSurvival;

		public final ConfigValue<Boolean> showUpdateMessage;
		public final ConfigValue<Boolean> enableTooltips;

		Common(ForgeConfigSpec.Builder builder) {
			builder.push("Log messages");
			terraforgedCheckMsg = builder.define("Terraforged check message active", true);
			builder.pop();
			builder.push("Attack Damage");
			builder.comment(" Set damages are of the Sword \n Axe is +2 damage, Shovel is -1 damage and Pickaxe is -2 damage \n Hoes are always 1 damage");
			builder.push("Ultimate Weapons/Tools");
			ultimateSwordDamage = builder.defineInRange("Damage of the Ultimate Sword", 40, 1, 2000);
			ultimateAxeDamage = builder.defineInRange("Damage of the Ultimate Axe", 42, 1, 2000);
			ultimatePickaxeDamage = builder.defineInRange("Damage of the Ultimate Pickaxe", 38, 1, 2000);
			ultimateShovelDamage = builder.defineInRange("Damage of the Ultimate Shovel", 39, 1, 2000);
			ultimateHoeDamage = builder.defineInRange("Damage of the Ultimate Hoe", 1, 1, 2000);
			ultimateBowArrowBaseDamage = builder.comment("How much damage the Ultimate bow will add up to the base arrow damage").define("Additional Damage of the Ultimate Bow Arrows", 5D);
			ultimateBowArrowDamageMultiplier = builder.define("Damage Multiplier of the Ultimate Bow's Power Enchantment", 0.5);
			builder.pop();
			builder.push("Emerald Weapons/Tools");
			emeraldSwordDamage = builder.defineInRange("Damage of the Emerald Sword", 10, 1, 2000);
			emeraldAxeDamage = builder.defineInRange("Damage of the Emerald Axe", 12, 1, 2000);
			emeraldPickaxeDamage = builder.defineInRange("Damage of the Emerald Pickaxe", 8, 1, 2000);
			emeraldShovelDamage = builder.defineInRange("Damage of the Emerald Shovel", 9, 1, 2000);
			emeraldHoeDamage = builder.defineInRange("Damage of the Emerald Hoe", 1, 1, 2000);
			builder.pop();
			builder.push("Ruby Weapons/Tools");
			rubySwordDamage = builder.defineInRange("Damage of the Ruby Sword", 20, 1, 2000);
			rubyAxeDamage = builder.defineInRange("Damage of the Ruby Axe", 22, 1, 2000);
			rubyPickaxeDamage = builder.defineInRange("Damage of the Ruby Pickaxe", 18, 1, 2000);
			rubyShovelDamage = builder.defineInRange("Damage of the Ruby Shovel", 19, 1, 2000);
			rubyHoeDamage = builder.defineInRange("Damage of the Ruby Hoe", 1, 1, 2000);
			builder.pop();
			builder.push("Amethyst Weapons/Tools");
			amethystSwordDamage = builder.defineInRange("Damage of the Amethyst Sword", 15, 1, 2000);
			amethystAxeDamage = builder.defineInRange("Damage of the Amethyst Axe", 17, 1, 2000);
			amethystPickaxeDamage = builder.defineInRange("Damage of the Amethyst Pickaxe", 13, 1, 2000);
			amethystShovelDamage = builder.defineInRange("Damage of the Amethyst Shovel", 14, 1, 2000);
			amethystHoeDamage = builder.defineInRange("Damage of the Amethyst Hoe", 1, 1, 2000);
			builder.pop();
			builder.push("Tiger's Eye Weapons/Tools");
			tigersEyeSwordDamage = builder.defineInRange("Damage of the Tiger's Eye Sword", 12, 1, 2000);
			tigersEyeAxeDamage = builder.defineInRange("Damage of the Tiger's Eye Axe", 14, 1, 2000);
			tigersEyePickaxeDamage = builder.defineInRange("Damage of the Tiger's Eye Pickaxe", 10, 1, 2000);
			tigersEyeShovelDamage = builder.defineInRange("Damage of the Tiger's Eye Shovel", 11, 1, 2000);
			tigersEyeHoeDamage = builder.defineInRange("Damage of the Tiger's Eye Hoe", 1, 1, 2000);
			builder.pop();
			builder.push("Crystal Wood Weapons/Tools");
			crystalWoodSwordDamage = builder.defineInRange("Damage of the Crystal Wood Sword", 5, 1, 2000);
			crystalWoodAxeDamage = builder.defineInRange("Damage of the Crystal Wood Axe", 9, 1, 2000);
			crystalWoodPickaxeDamage = builder.defineInRange("Damage of the Crystal Wood Pickaxe", 3, 1, 2000);
			crystalWoodShovelDamage = builder.defineInRange("Damage of the Crystal Wood Shovel", 3, 1, 2000);
			crystalWoodHoeDamage = builder.defineInRange("Damage of the Crystal Wood Hoe", 1, 1, 2000);
			builder.pop();
			builder.push("Kyanite Weapons/Tools");
			kyaniteSwordDamage = builder.defineInRange("Damage of the Kyanite Sword", 6, 1, 2000);
			kyaniteAxeDamage = builder.defineInRange("Damage of the Kyanite Axe", 9, 1, 2000);
			kyanitePickaxeDamage = builder.defineInRange("Damage of the Kyanite Pickaxe", 4, 1, 2000);
			kyaniteShovelDamage = builder.defineInRange("Damage of the Kyanite Shovel", 4, 1, 2000);
			kyaniteHoeDamage = builder.defineInRange("Damage of the Kyanite Hoe", 1, 1, 2000);
			builder.pop();
			builder.push("Cat's Eye Weapons/Tools");
			catsEyeSwordDamage = builder.defineInRange("Damage of the Cat's Eye Sword", 12, 1, 2000);
			catsEyeAxeDamage = builder.defineInRange("Damage of the Cat's Eye Axe", 14, 1, 2000);
			catsEyePickaxeDamage = builder.defineInRange("Damage of the Cat's Eye Pickaxe", 10, 1, 2000);
			catsEyeShovelDamage = builder.defineInRange("Damage of the Cat's Eye Shovel", 11, 1, 2000);
			catsEyeHoeDamage = builder.defineInRange("Damage of the Cat's Eye Hoe", 1, 1, 2000);
			builder.pop();
			builder.push("Pink Tourmaline Weapons/Tools");
			pinkTourmSwordDamage = builder.defineInRange("Damage of the Pink Tourmaline Sword", 11, 1, 2000);
			pinkTourmAxeDamage = builder.defineInRange("Damage of the Pink Tourmaline Axe", 13, 1, 2000);
			pinkTourmPickaxeDamage = builder.defineInRange("Damage of the Pink Tourmaline Pickaxe", 9, 1, 2000);
			pinkTourmShovelDamage = builder.defineInRange("Damage of the Pink Tourmaline Shovel", 10, 1, 2000);
			pinkTourmHoeDamage = builder.defineInRange("Damage of the Pink Tourmaline Hoe", 1, 1, 2000);
			builder.pop();
			builder.push("Copper Weapons/Tools");
			copperSwordDamage = builder.defineInRange("Damage of the Copper Sword", 5, 1, 2000);
			copperAxeDamage = builder.defineInRange("Damage of the Copper Axe", 9, 1, 2000);
			copperPickaxeDamage = builder.defineInRange("Damage of the Copper Pickaxe", 3, 1, 2000);
			copperShovelDamage = builder.defineInRange("Damage of the Copper Shovel", 4, 1, 2000);
			copperHoeDamage = builder.defineInRange("Damage of the Copper Hoe", 1, 1, 2000);
			builder.pop();
			builder.push("Tin Weapons/Tools");
			tinSwordDamage = builder.defineInRange("Damage of the Tin Sword", 6, 1, 2000);
			tinAxeDamage = builder.defineInRange("Damage of the Tin Axe", 9, 1, 2000);
			tinPickaxeDamage = builder.defineInRange("Damage of the Tin Pickaxe", 4, 1, 2000);
			tinShovelDamage = builder.defineInRange("Damage of the Tin Shovel", 4, 1, 2000);
			tinHoeDamage = builder.defineInRange("Damage of the Tin Hoe", 1, 1, 2000);
			builder.pop();
			builder.push("Silver Weapons/Tools");
			silverSwordDamage = builder.defineInRange("Damage of the Silver Sword", 6, 1, 2000);
			silverAxeDamage = builder.defineInRange("Damage of the Silver Axe", 9, 1, 2000);
			silverPickaxeDamage = builder.defineInRange("Damage of the Silver Pickaxe", 4, 1, 2000);
			silverShovelDamage = builder.defineInRange("Damage of the Silver Shovel", 5, 1, 2000);
			silverHoeDamage = builder.defineInRange("Damage of the Silver Hoe", 1, 1, 2000);
			builder.pop();
			builder.push("Platinum Weapons/Tools");
			platinumSwordDamage = builder.defineInRange("Damage of the Platinum Sword", 10, 1, 2000);
			platinumAxeDamage = builder.defineInRange("Damage of the Platinum Axe", 12, 1, 2000);
			platinumPickaxeDamage = builder.defineInRange("Damage of the Platinum Pickaxe", 8, 1, 2000);
			platinumShovelDamage = builder.defineInRange("Damage of the Platinum Shovel", 9, 1, 2000);
			platinumHoeDamage = builder.defineInRange("Damage of the Platinum Hoe", 1, 1, 2000);
			builder.pop();
			builder.push("Misc Weapons/Tools");
			nightmareSwordDamage = builder.defineInRange("Damage of the Nightmare Sword", 30, 1, 2000);
			experienceSwordDamage = builder.defineInRange("Damage of the Experience Sword", 10, 1, 2000);
			poisonSwordDamage = builder.defineInRange("Damage of the Poison Sword", 10, 1, 2000);
			ratSwordDamage = builder.defineInRange("Damage of the Rat Sword", 10, 1, 2000);
			fairySwordDamage = builder.defineInRange("Damage of the Fairy Sword", 10, 1, 2000);
			mantisClawDamage = builder.defineInRange("Damage of the Mantis Claw", 10, 1, 2000);
			bigHammerDamage = builder.defineInRange("Damage of the Big Hammer", 15, 1, 2000);
			prismaticReaperDamage = builder.defineInRange("Damage of the Prismatic Reaper", 29, 1, 2000);
			builder.pop();
			builder.push("Big Weapons/Tools");
			attitudeAdjusterDamage = builder.defineInRange("Damage of the Attitude Adjuster", 65, 1, 2000);
			berthaDamage = builder.defineInRange("Damage of the Big Bertha", 500, 1, 2000);
			battleAxeDamage = builder.defineInRange("Damage of the Battle Axe", 50, 1, 2000);
			queenAxeDamage = builder.defineInRange("Damage of the Queen Scale Battle Axe", 666, 1, 2000);
			slayerChainsawDamage = builder.defineInRange("Damage of the Slayer Chainsaw", 40, 1, 2000);
			attitudeAdjusterExplosionSize = builder.define("Attitude Adjuster explosion size", 4);
			builder.pop();
			builder.pop();
			builder.push("Functionality");
			builder.push("Thunder Staff");
			thunderStaffExplosionSize = builder.define("Thunder Staff explosion size", 4);
			thunderStaffExplosionType = builder.comment("0 = NONE - The Thunder Staff will not affect the terrain." + "\n" + "1 = BREAK - The Thunder Staff will drop some blocks that it breaks. (May not work due to lightning)" + "\n" + "2 = DESTROY - The Thunder Staff will destroy blocks and never drop them.").defineInRange("Thunder Staff explosion type", 2, 0, 2);
			thunderStaffExplosionFire = builder.define("Fire from Thunder Staff explosion", true);
			builder.pop();
			builder.push("Ray Gun");
			rayGunExplosionSize = builder.define("Ray Gun explosion size", 6);
			rayGunExplosionType = builder.comment("0 = NONE - The Ray Gun will not affect the terrain." + "\n" + "1 = BREAK - The Ray Gun will drop some blocks that it breaks." + "\n" + "2 = DESTROY - The Ray Gun will destroy blocks and never drop them.").defineInRange("Ray Gun explosion type", 2, 0, 2);
			rayGunExplosionFire = builder.define("Fire from Ray Gun explosion", false);
			builder.pop();
			builder.push("World Generation");
			enableOreGen = builder.define("Enable ore generation", true);
			builder.push("Specific Ore Spawning");
			enableOreSaltGen = builder.define("Salt ore generation", true);
			enableOreAmethystGen = builder.define("Amethyst ore generation", true);
			enableOreRubyGen = builder.define("Ruby ore generation", true);
			enableOreTigersEyeGen = builder.define("Tiger's Eye ore generation", true);
			enableOreTitaniumGen = builder.define("Titanium ore generation", true);
			enableOreUraniumGen = builder.define("Uranium ore generation", true);
			enableOreCopperGen = builder.define("Copper ore generation", true);
			enableOreTinGen = builder.define("Tin ore generation", true);
			enableOreSilverGen = builder.define("Silver ore generation", true);
			enableOrePlatinumGen = builder.define("Platinum ore generation", true);
			enableOreSunstoneGen = builder.define("Sunstone ore generation", true);
			enableOreBloodstoneGen = builder.define("Bloodstone ore generation", true);
			enableOreAluminumGen = builder.define("Aluminum ore generation", true);
			builder.pop();
			enableFossilGen = builder.define("Enable fossilised spawn egg generation", true);
			enableTrollOreGen = builder.define("Enable infested ore generation", true);
			enableDzMineralOreGen = builder.define("Enable DZ ore generation", true);
			spawnDzOresInOverworld = builder.comment("Will DZ ores spawn in the Overworld?").define("Overworld DZ Ores", false);
			enableNestGen = builder.comment("Will Nests spawn in the Overworld or the Ant Dimensions?").define("Ant Nest generation", true);
			builder.pop();
			builder.push("Tools/Weapons");
			enableAutoEnchanting = builder.comment("If disabled, auto-enchanted items will be able to be enchanted manually.").define("Auto-enchant specific tools and weapons", true);
			builder.pop();
			builder.push("Dimensions");
			crystalWorldRequiresEmptyInventory = builder.comment("Disable the requirement of needing an empty inventory to enter the Crystal World (Termite Dimension)?").define("Crystal World Requires Empty Inventory", true);
			enableBrownAntTeleport = builder.comment("Will the Brown Ant teleport you to its Dimension?").define("Brown Ant Teleport", true);
			enableRainbowAntTeleport = builder.comment("Will the Rainbow Ant teleport you to its Dimension?").define("Rainbow Ant Teleport", true);
			enableRedAntTeleport = builder.comment("Will the Red Ant teleport you to its Dimension?").define("Red Ant Teleport", true);
			enableUnstableAntTeleport = builder.comment("Will the Unstable Ant teleport you to its Dimension?").define("Unstable Ant Teleport", true);
			enableTermiteTeleport = builder.comment("Will the Termite teleport you to its Dimension?").define("Termite Teleport", true);
			enableButterflyTeleport = builder.comment("Will the Butterfly teleport you to its Dimension?").define("Butterfly Teleport", true);
			builder.pop();
			builder.push("Breeding");
			enableEnchantedAnimalBreeding = builder.comment("Will Enchanted Animals be Breedable?").define("Enchanted Animal Breeding", false);
			builder.pop();
			builder.push("Textures");
			holidayTextures = builder.comment("Will holiday special textures be obtainable?").define("Obtainable Holiday Textures", true);
			builder.pop();
			builder.push("Drops");
			enableDragonEggRespawns = builder.comment("Will the Ender Dragon Egg respawn after the first death?").define("Ender Dragon Egg Respawn", true);
			enderDragonHeadDrop = builder.comment("Will the Ender Dragon drop her head?").define("Ender Dragon Head Drop", true);
			builder.pop();
			builder.push("Update Checker");
			showUpdateMessage = builder.comment("Send messages when there is a new update?").define("Show Update Messages", true);
			builder.pop();
			builder.push("Tooltips");
			enableTooltips = builder.comment("Enable Tooltips for Items and Blocks!").define("Enable Tooltips", true);
			builder.pop();
			builder.push("Spawners");
			spawnEggsSpawnersSurvival = builder.comment("0 = No Blocking - All Spawn Eggs can be used on a Spawner in Survival." + "\n" + "1 = Block All Spawn Eggs - All Spawn Eggs will be blocked from being used on a Spawner in Survival." + "\n" + "2 = Only Block Chaos Awakens - Only Spawn Eggs from Chaos Awakens will be blocked from being used on a Spawner in Survival.").defineInRange("Spawn Eggs on Spawners in Survival?", 1, 0, 2);
			builder.pop();
		}
	}
}
